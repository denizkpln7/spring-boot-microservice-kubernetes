version: "3.5"

services:
  # redis:
  #   image: redis:latest
  #   ports:
  #     - "6379:6379"
  zookeeper:
    image: "docker.io/bitnami/zookeeper:3"
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: "docker.io/bitnami/kafka:2-debian-10"
    ports:
      - "9092:9092"
    expose:
      - "9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring       

  mysql8:
    container_name: mysql8
    image: mysql:8
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: deniz
      MYSQL_DATABASE: employee
    volumes:
      - data-mysql:/var/lib/mysql
    restart: always
    networks:
      - spring

  postgres14:
    container_name: postgres14
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: deniz
      POSTGRES_DB: department
    volumes:
      - data-postgres:/var/lib/postgresql/data
    restart: always
    networks:
      - spring    

  serviceregistry:
    image: 'denizkpln/dk-service-registry'
    container_name: serviceregistry
    ports:
      - '8761:8761'
    networks:
      - spring        

  configserver:
    image: 'denizkpln/dk-config-server'
    container_name: configserver
    ports:
      - '8888:8888'
    environment:
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
    depends_on:
      - serviceregistry
    networks:
      - spring  

      
  employee-service:
    container_name: employee-service
    image: denizkpln/dk-employee-service
    ports:
      - "8001:8001"
    environment:
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER=http://configserver:8888/
      - ZIPKIN_URI=http://zipkin:9411
      - DB_HOST=mysql8:3306
      - DB_DATABASE=employee
      - DB_USERNAME=root
      - DB_PASSWORD=deniz
    networks:
      - spring
    depends_on:
      - mysql8
      - configserver
      - serviceregistry
      - zipkin
    restart: always 

  department-service:
    container_name: department-service
    image: denizkpln/dk-department-service
    ports:
      - "8002:8002"
    environment:
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
      - CONFIG_SERVER=http://configserver:8888/
      - ZIPKIN_URI=http://zipkin:9411
      - DB_HOST=postgres14:5432
      - DB_DATABASE=department
      - DB_USERNAME=postgres
      - DB_PASSWORD=deniz
    networks:
      - spring
    depends_on:
      - postgres14
      - configserver
      - serviceregistry
      - zipkin
    restart: always             

  notification-service:
    container_name: notification-service
    image: denizkpln/dk-notification-service
    ports:
      - "8090:8090"
    environment:
      - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
    networks:
      - spring
    depends_on:
      - serviceregistry
    restart: always  
  
  # api-gateway:
  #   image: 'denizkpln/dk-api-gateway'
  #   container_name: api-gateway
  #   ports:
  #     - '8889:8889'
  #   environment:
  #     - EUREKA_SERVER_ADDRESS=http://serviceregistry:8761/eureka
  #     # - ZIPKIN_URI=http://zipkin:9411
  #   depends_on:
  #     - serviceregistry
  #     - zipkin  
  #     - employee-service

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  data-mysql:
    name: data-mysql
  data-postgres:
    name: data-postgres  


networks:
  spring:
    name: spring